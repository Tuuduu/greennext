import { NextResponse } from "next/server";
import { connectDB } from "@/library/mongoDB/connect";
import * as XLSX from "xlsx";
import mongoose from "mongoose";

export async function GET() {
  try {
    // üîπ MongoDB —Ö–æ–ª–±–æ–ª—Ç “Ø“Ø—Å–≥—ç—Ö
    await connectDB();

    // üîπ "mta-tickets" –∫–æ–ª–ª–µ–∫—à–Ω–∏–π –º–æ–¥–µ–ª—å “Ø“Ø—Å–≥—ç—Ö
    const mtaTicketSchema = new mongoose.Schema(
      {
        ticketType: String,
        username: String,
        title: String,
        description: String,
        modifierUserName: String,
        createdDate: String,
        updatedDate: String,
        company: String,
        phoneNumber: Number,
        status: String,
        modifierUserId: String,
      },
      { collection: "mta-tickets" } // üî• –≠–Ω—ç –∫–æ–ª–ª–µ–∫—à–Ω–∏–π–≥ –æ–Ω–æ–æ–∂ ”©–≥—Å”©–Ω
    );

    const MtaTickets =
      mongoose.models.MtaTickets ||
      mongoose.model("MtaTickets", mtaTicketSchema);

    // üîπ "mta-tickets" –∫–æ–ª–ª–µ–∫—à–Ω–æ–æ—Å ”©–≥”©–≥–¥”©–ª –∞–≤–∞—Ö
    const tickets = await MtaTickets.find().lean();

    if (!tickets || tickets.length === 0) {
      return NextResponse.json(
        { error: "MTA Tickets –∫–æ–ª–ª–µ–∫—à–Ω–¥ ”©–≥”©–≥–¥”©–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π." },
        { status: 404 }
      );
    }

    console.log("MTA Tickets ”©–≥”©–≥–¥”©–ª:", tickets); // ‚úÖ Debug —Ö–∏–π—Ö—ç–¥ —Ö—ç—Ä—ç–≥—Ç—ç–π

    // üîπ –î—É–≥–∞–∞—Ä –Ω—ç–º—ç—Ö –±–∞ `_id`-–≥ —Ö–∞—Å–∞—Ö
    const numberedTickets = tickets.map((ticket: any, index: number) => {
      const { _id, ...rest } = ticket; // üî• `_id`-–≥ —É—Å—Ç–≥–∞–∂ –±–∞–π–≥–∞–∞
      return {
        No: index + 1, // –î—É–≥–∞–∞—Ä –Ω—ç–º—ç—Ö
        ...rest, // –ë—É—Å–∞–¥ ”©–≥”©–≥–¥–ª“Ø“Ø–¥–∏–π–≥ “Ø–ª–¥—ç—ç—Ö
      };
    });

    // üîπ Excel —Ö“Ø—Å–Ω—ç–≥—Ç—ç–¥ —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
    const worksheet = XLSX.utils.json_to_sheet([]);

    // üîπ –ì–∞—Ä—á–∏–≥ –Ω—ç–º—ç—Ö
    const title = "–ì–†–ò–ô–ù –î–ò–°–¢–†–ò–ë–¨–Æ–®–ù –•–•–ö-–ò–ô–ù –ö–û–ú–ü–¨–Æ–¢–ï–†–´–ù –ë“Æ–†–¢–ì–≠–õ";
    XLSX.utils.sheet_add_aoa(worksheet, [[title]], { origin: "A1" });

    // üîπ –¢–æ–ª–≥–æ–π–Ω –º”©—Ä–∏–π–≥ –Ω—ç–º—ç—Ö
    const headers = Object.keys(numberedTickets[0]);
    XLSX.utils.sheet_add_aoa(worksheet, [headers], { origin: "A3" });

    // üîπ ”®–≥”©–≥–¥–ª–∏–π–≥ —Ö“Ø—Å–Ω—ç–≥—Ç—ç–Ω–¥ –Ω—ç–º—ç—Ö
    XLSX.utils.sheet_add_json(worksheet, numberedTickets, {
      origin: "A4",
      skipHeader: true,
    });

    // üîπ –ì–∞—Ä—á–∏–≥—Ç —Å—Ç–∏–ª—å —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
    worksheet["!merges"] = [
      { s: { r: 0, c: 0 }, e: { r: 0, c: headers.length - 1 } },
    ];
    worksheet["A1"].s = {
      font: { bold: true, sz: 14 },
      alignment: { horizontal: "center" },
    };

    // üîπ AutoFilter —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
    worksheet["!autofilter"] = {
      ref: `A3:${String.fromCharCode(65 + headers.length - 1)}3`,
    };

    // üîπ –ë–∞–≥–∞–Ω—ã–Ω ”©—Ä–≥”©–Ω —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
    worksheet["!cols"] = headers.map(() => ({ wch: 20 }));

    // üîπ Excel Workbook “Ø“Ø—Å–≥—ç—Ö
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "MTA Tickets");

    // üîπ Excel —Ñ–∞–π–ª Buffer –±–æ–ª–≥–æ–Ω —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
    const excelBuffer = XLSX.write(workbook, {
      bookType: "xlsx",
      type: "buffer",
    });

    // üîπ Excel —Ç–∞—Ç–∞—Ö–∞–¥ —Ç–æ—Ö–∏—Ä–æ–º–∂—Ç–æ–π header —Ç–æ—Ö–∏—Ä–≥–æ–æ
    return new NextResponse(excelBuffer, {
      headers: {
        "Content-Type":
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "Content-Disposition": "attachment; filename=mta_tickets_report.xlsx",
      },
    });
  } catch (error: any) {
    console.error("Excel “Ø“Ø—Å–≥—ç—Ö –∞–ª–¥–∞–∞:", error);
    return NextResponse.json(
      { error: "Excel —Ç–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", details: error.message },
      { status: 500 }
    );
  }
}
